{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/selector-pattern-and-reselect/","webpackCompilationHash":"67d74db9eb492208cad0","result":{"data":{"markdownRemark":{"id":"088abeda-b918-5d50-983c-2f4b72375832","html":"<p>개발중인 react-native 프로젝트에 redux와 redux-saga를 적용하게 되었습니다. 컴포넌트로부터 데이터 로직을 분리해서 더 관리하기 좋은 코드를 만들기 위함이었습니다.</p>\n<p>프로젝트에 redux를 도입하면서 아래와 같은 절차로 데이터 요청을 수행했습니다.</p>\n<ol>\n<li>컴포넌트의 <code class=\"language-text\">ComponentDidMount</code>에서 <code class=\"language-text\">FETCH_DATA</code> 액션을 dispatch하면 saga에서 해당 액션을 take합니다.</li>\n<li>saga에서 API 요청을 수행합니다. </li>\n<li><code class=\"language-text\">FETCH_DATA_SUCCESS</code> 액션을 dispatch해서 가져온 데이터를 store에 저장합니다.</li>\n</ol>\n<p>이 상황에서 컴포넌트가 가져온 데이터를 그대로 사용하거나 일부만 사용할 때에는 별로 어려움이 없었습니다. 하지만, 요청한 데이터를 조합해서 새로운 형태로 가져오거나 계산이 필요한 경우 어디에서 해당 작업을 수행할지를 결정하기가 애매했습니다.</p>\n<p>찾아보니 오늘 글에서 소개할 selector 패턴을 통해 이 문제를 효율적으로 해결할 수 있었습니다. 오늘 글에서는 selector 패턴과 이 패턴을 더욱 효율적으로 적용할 수 있는 reselect 라이브러리에 대해서 소개하겠습니다. </p>\n<h2 id=\"selector\"><a href=\"#selector\" aria-label=\"selector permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selector</h2>\n<p><a href=\"https://godsenal.github.io/2018/07/25/Redux-selector-%ED%8C%A8%ED%84%B4%EA%B3%BC-reselect/\">이 글</a>에서 store에 저장하는 액션을 <code class=\"language-text\">setter</code>, selector를 <code class=\"language-text\">getter</code>에 비유해주셨습니다. 쉽게 이해되는 비유라고 생각합니다. </p>\n<p><strong>selector</strong>는 store에 저장된 state에서 필요한 데이터를 선별적으로 가져오거나, 계산을 수행해서 원하는 형태의 데이터를 가져오는 일을 합니다.</p>\n<p>A 컴포넌트와 B 컴포넌트에서 동일한 API를 요청해서 서로 다른 형태로 데이터를 가져온다고 가정해봅시다. A 컴포넌트에서는 결과 중 일부를 계산해서 사용해야 하고, B 컴포넌트에서는 응답받은 결과를 그대로 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  A_COMP: {\n    \n  },\n  B_COMP: {\n  \n  },\n  // ...\n}</code></pre></div>\n<p>A 컴포넌트에 대해서만 고려하고 응답 결과를 원하는 형태로 계산해 store에 저장하면 이후 B 컴포넌트를 개발할 때, 원래의 응답 결과를 그대로 사용하기 위해 store에 또 다른 필드를 추가해서 사용해야 합니다. </p>\n<p>이런 컴포넌트가 여러개 생긴다면 store에 저장되는 데이터들이 늘어나고 관리가 어려워질 것입니다.</p>\n<p><strong>selector pattern</strong>을 사용하면 응답 결과는 store에 저장하고 컴포넌트에 필요한 데이터 계산은 selector에게 맡기기 때문에 store를 좀 더 효율적으로 관리할 수 있습니다.</p>\n<h3 id=\"selector-example\"><a href=\"#selector-example\" aria-label=\"selector example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selector Example</h3>\n<p>좀 더 쉬운 이해를 위해서 간단한 예제를 준비했습니다.</p>\n<p>FETCH 액션을 dispatch하면 설문(poll) 목록을 가져오는 API를 요청하고 그 결과를 store의 poll에 저장하는 상황을 예시로 들어보겠습니다. <code class=\"language-text\">MyComponent</code>에서는 끝나지 않은 설문(<code class=\"language-text\">!poll.is_done</code>)만을 가져와서 컴포넌트에 제공하고 싶습니다.</p>\n<blockquote>\n<p><strong>[주의]</strong> 아래 예제에서 rootReducer 등 redux의 기본적인 예제까지 추가하지는 않았습니다. rootReducer에서 아래의 pollReducer를 combineReducer()로 합쳐서 사용하는 부분은 생략되어 있습니다!</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// pollReducers.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createAction<span class=\"token punctuation\">,</span> handleActions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-actions'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">FETCH_POLL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'@poll/FETCH_POLL'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">FETCH_POLL_SUCCESS</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'@poll/FETCH_POLL_SUCCESS'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> creators <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  fetchPoll<span class=\"token punctuation\">:</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">.</span><span class=\"token constant\">FETCH_POLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fetchPollSuccess<span class=\"token punctuation\">:</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">.</span><span class=\"token constant\">FETCH_POLL_SUCCESS</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">payload</span> <span class=\"token operator\">=></span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  polls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> pollReducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>actions<span class=\"token punctuation\">.</span><span class=\"token constant\">FETCH_POLL_SUCCESS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n    polls<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>payload\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// selector.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> initialState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./pollReducers'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getNotDonePoll</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>poll <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">.</span>poll<span class=\"token punctuation\">.</span>polls<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">.</span>polls<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>poll<span class=\"token punctuation\">.</span>polls<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">poll</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>poll<span class=\"token punctuation\">.</span>is_done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// MyComponent.js</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> actions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./pollReducers'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getNotDonePoll <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./selector'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> fetchPoll <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchPoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token comment\">// ..</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  polls<span class=\"token punctuation\">:</span> <span class=\"token function\">getNotDonePoll</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">fetchPoll</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">.</span><span class=\"token constant\">FETCH_POLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MyComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>컴포넌트에서 props로 store의 값을 가져올 때, 만들었던 selector를 통해 가져오면 state에서 필요한 값만 가져오거나 원하는 형태로 계산해서 가져올 수 있게 됩니다. 컴포넌트마다 다른 형태로 값을 가져오더라도 selector만 관리하면 되기 때문에 store를 깨끗하게 관리할 수 있어요 :)</p>\n<p>하지만 저렇게 selector를 사용하면 state가 변경될 때마다 selector 함수가 매번 실행됩니다. 매 state 변경마다 계산을 수행한다면 많은 데이터를 다룰 때에는 성능 상의 이슈가 발생할 수 있습니다. </p>\n<h2 id=\"reselect\"><a href=\"#reselect\" aria-label=\"reselect permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reselect</h2>\n<p>이 문제를 해결해주는 것이 바로 <strong>reselect</strong>입니다. </p>\n<p><img src=\"https://miro.medium.com/max/2000/1*tKjjA3uxJKeirjYf_Ep7tw.jpeg\" alt=\"Reselect_Image\"></p>\n<p>Reselector는 위의 selector 역할을 수행하면서 캐싱을 통해 동일한 계산을 방지해서 성능을 향상해줍니다. 파라미터로 전달받은 값이 이전과 같다면, 새롭게 계산하지 않고 저장된 결과 값을 돌려줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createSelector <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'reselect'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> initialState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./friend.reducer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">selectFriend</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>friend <span class=\"token operator\">||</span> initialState<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> getSearchedFriends <span class=\"token operator\">=</span> <span class=\"token function\">createSelector</span><span class=\"token punctuation\">(</span>\n  selectFriend<span class=\"token punctuation\">,</span>\n  <span class=\"token parameter\">friendState</span> <span class=\"token operator\">=></span>\n    friendState<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> \n      item<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>friendState<span class=\"token punctuation\">.</span>friendSearchInputText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span> getSearchedFriends <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">selectFriend</code>는 state에 friend 값이 있으면 반환하고, 없으면 friend의 초기상태를 반환하도록 예외처리를 고려해서 추가된 코드입니다.</p>\n</blockquote>\n<p>reselect도 위에서 만든 selector처럼 state를 넣어주고, state를 가공할 콜백을 전달하면 됩니다. 이렇게 만든 reselect 함수를 컴포넌트에서 import 하여 <code class=\"language-text\">mapStateToProps</code>에서 state를 전달해 사용하면 됩니다.</p>\n<p>지인 중 React 전문가 한 분께 여쭤보았더니 다음과 같은 경우 reselctor 도입을 고려해보면 좋을 것 같다고 말씀해주셨습니다.</p>\n<ol>\n<li>데이터가 많아 캐싱이나 최적화가 필요하다.</li>\n<li>테스트 코드를 짜서 테스트를 용이하게 하고 싶다.</li>\n<li>필요한 데이터를 주는 로직이 전부 다 서버내 구현되어 있지 않다.</li>\n<li>받아온 데이터를 처리해야 할 로직이 많다.</li>\n<li>서버자원을 조금 아끼고싶다.\nex) 데이터 일정 부분 필터링, 기존 데이터 값에서 새로운 값을 계산해서 반환(환율 계산)</li>\n<li>컴포넌트에서 데이터를 파싱하는 로직을 추가하기보단 파싱된 데이터를 받고 사용만하는 식으로 코드 분리를 하고싶다.</li>\n</ol>\n<p>API로 가져온 데이터를 어떻게 처리해야 할지 고민된다면 selector pattern과 reselect에 대해 고려해보시면 좋을 것 같습니다. 아래에는 이 글을 작성하면서 참고했던 좋은 글들을 첨부했습니다. 시간 나실 때 함께 읽어보시면 좋을 것 같습니다 :)</p>\n<h2 id=\"reference\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://medium.com/@ljs0705/redux-reselect-490f9acc1090\">redux + reselect</a> </li>\n<li><a href=\"http://guswnsxodlf.github.io/optimize-react-component-using-reselect\">Reselect를 이용하여 React와 Redux 최적화하기</a></li>\n<li><a href=\"https://godsenal.github.io/2018/07/25/Redux-selector-%ED%8C%A8%ED%84%B4%EA%B3%BC-reselect/\">Redux - Selector 패턴과 Reselect |   Godsenal’s Blog</a></li>\n<li><a href=\"https://medium.com/@matthew.holman/what-is-a-redux-selector-a517acee1fe8\">What is a Redux selector? - Matthew Holman - Medium</a></li>\n</ul>","fields":{"slug":"/posts/selector-pattern-and-reselect/","tagSlugs":null},"frontmatter":{"date":"2019-08-06","description":"React에 Selector 패턴을 적용했을 때의 장점과 reselect 라이브러리에 대해 정리한 글입니다.","title":"[React] Selector Pattern과 Reselect","category":"React"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/selector-pattern-and-reselect/"}}}